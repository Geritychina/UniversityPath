//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC.SOAPService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SOAPService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        MVC.SOAPService.CompositeType GetDataUsingDataContract(MVC.SOAPService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<MVC.SOAPService.CompositeType> GetDataUsingDataContractAsync(MVC.SOAPService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployees", ReplyAction="http://tempuri.org/IService1/GetEmployeesResponse")]
        ApplicationService.DTOs.EmployeeDTO[] GetEmployees(string searchEmp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployees", ReplyAction="http://tempuri.org/IService1/GetEmployeesResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.EmployeeDTO[]> GetEmployeesAsync(string searchEmp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostEmployee", ReplyAction="http://tempuri.org/IService1/PostEmployeeResponse")]
        string PostEmployee(ApplicationService.DTOs.EmployeeDTO employeeDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostEmployee", ReplyAction="http://tempuri.org/IService1/PostEmployeeResponse")]
        System.Threading.Tasks.Task<string> PostEmployeeAsync(ApplicationService.DTOs.EmployeeDTO employeeDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployeeByID", ReplyAction="http://tempuri.org/IService1/GetEmployeeByIDResponse")]
        ApplicationService.DTOs.EmployeeDTO GetEmployeeByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployeeByID", ReplyAction="http://tempuri.org/IService1/GetEmployeeByIDResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.EmployeeDTO> GetEmployeeByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutEmployee", ReplyAction="http://tempuri.org/IService1/PutEmployeeResponse")]
        string PutEmployee(ApplicationService.DTOs.EmployeeDTO employeeDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutEmployee", ReplyAction="http://tempuri.org/IService1/PutEmployeeResponse")]
        System.Threading.Tasks.Task<string> PutEmployeeAsync(ApplicationService.DTOs.EmployeeDTO employeeDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEmployee", ReplyAction="http://tempuri.org/IService1/DeleteEmployeeResponse")]
        string DeleteEmployee(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEmployee", ReplyAction="http://tempuri.org/IService1/DeleteEmployeeResponse")]
        System.Threading.Tasks.Task<string> DeleteEmployeeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPositions", ReplyAction="http://tempuri.org/IService1/GetPositionsResponse")]
        ApplicationService.DTOs.PositionDTO[] GetPositions(string searchPos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPositions", ReplyAction="http://tempuri.org/IService1/GetPositionsResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.PositionDTO[]> GetPositionsAsync(string searchPos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPositionByID", ReplyAction="http://tempuri.org/IService1/GetPositionByIDResponse")]
        ApplicationService.DTOs.PositionDTO GetPositionByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPositionByID", ReplyAction="http://tempuri.org/IService1/GetPositionByIDResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.PositionDTO> GetPositionByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostPosition", ReplyAction="http://tempuri.org/IService1/PostPositionResponse")]
        string PostPosition(ApplicationService.DTOs.PositionDTO positionDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostPosition", ReplyAction="http://tempuri.org/IService1/PostPositionResponse")]
        System.Threading.Tasks.Task<string> PostPositionAsync(ApplicationService.DTOs.PositionDTO positionDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutPosition", ReplyAction="http://tempuri.org/IService1/PutPositionResponse")]
        string PutPosition(ApplicationService.DTOs.PositionDTO positionDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutPosition", ReplyAction="http://tempuri.org/IService1/PutPositionResponse")]
        System.Threading.Tasks.Task<string> PutPositionAsync(ApplicationService.DTOs.PositionDTO positionDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePosition", ReplyAction="http://tempuri.org/IService1/DeletePositionResponse")]
        string DeletePosition(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePosition", ReplyAction="http://tempuri.org/IService1/DeletePositionResponse")]
        System.Threading.Tasks.Task<string> DeletePositionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContracts", ReplyAction="http://tempuri.org/IService1/GetContractsResponse")]
        ApplicationService.DTOs.ContractDTO[] GetContracts(string searchContr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContracts", ReplyAction="http://tempuri.org/IService1/GetContractsResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.ContractDTO[]> GetContractsAsync(string searchContr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContractByID", ReplyAction="http://tempuri.org/IService1/GetContractByIDResponse")]
        ApplicationService.DTOs.ContractDTO GetContractByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContractByID", ReplyAction="http://tempuri.org/IService1/GetContractByIDResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.ContractDTO> GetContractByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostContract", ReplyAction="http://tempuri.org/IService1/PostContractResponse")]
        string PostContract(ApplicationService.DTOs.ContractDTO contractDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostContract", ReplyAction="http://tempuri.org/IService1/PostContractResponse")]
        System.Threading.Tasks.Task<string> PostContractAsync(ApplicationService.DTOs.ContractDTO contractDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutContract", ReplyAction="http://tempuri.org/IService1/PutContractResponse")]
        string PutContract(ApplicationService.DTOs.ContractDTO contractDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutContract", ReplyAction="http://tempuri.org/IService1/PutContractResponse")]
        System.Threading.Tasks.Task<string> PutContractAsync(ApplicationService.DTOs.ContractDTO contractDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteContract", ReplyAction="http://tempuri.org/IService1/DeleteContractResponse")]
        string DeleteContract(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteContract", ReplyAction="http://tempuri.org/IService1/DeleteContractResponse")]
        System.Threading.Tasks.Task<string> DeleteContractAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : MVC.SOAPService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<MVC.SOAPService.IService1>, MVC.SOAPService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public MVC.SOAPService.CompositeType GetDataUsingDataContract(MVC.SOAPService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<MVC.SOAPService.CompositeType> GetDataUsingDataContractAsync(MVC.SOAPService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public ApplicationService.DTOs.EmployeeDTO[] GetEmployees(string searchEmp) {
            return base.Channel.GetEmployees(searchEmp);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.EmployeeDTO[]> GetEmployeesAsync(string searchEmp) {
            return base.Channel.GetEmployeesAsync(searchEmp);
        }
        
        public string PostEmployee(ApplicationService.DTOs.EmployeeDTO employeeDto) {
            return base.Channel.PostEmployee(employeeDto);
        }
        
        public System.Threading.Tasks.Task<string> PostEmployeeAsync(ApplicationService.DTOs.EmployeeDTO employeeDto) {
            return base.Channel.PostEmployeeAsync(employeeDto);
        }
        
        public ApplicationService.DTOs.EmployeeDTO GetEmployeeByID(int id) {
            return base.Channel.GetEmployeeByID(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.EmployeeDTO> GetEmployeeByIDAsync(int id) {
            return base.Channel.GetEmployeeByIDAsync(id);
        }
        
        public string PutEmployee(ApplicationService.DTOs.EmployeeDTO employeeDTO) {
            return base.Channel.PutEmployee(employeeDTO);
        }
        
        public System.Threading.Tasks.Task<string> PutEmployeeAsync(ApplicationService.DTOs.EmployeeDTO employeeDTO) {
            return base.Channel.PutEmployeeAsync(employeeDTO);
        }
        
        public string DeleteEmployee(int id) {
            return base.Channel.DeleteEmployee(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteEmployeeAsync(int id) {
            return base.Channel.DeleteEmployeeAsync(id);
        }
        
        public ApplicationService.DTOs.PositionDTO[] GetPositions(string searchPos) {
            return base.Channel.GetPositions(searchPos);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.PositionDTO[]> GetPositionsAsync(string searchPos) {
            return base.Channel.GetPositionsAsync(searchPos);
        }
        
        public ApplicationService.DTOs.PositionDTO GetPositionByID(int id) {
            return base.Channel.GetPositionByID(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.PositionDTO> GetPositionByIDAsync(int id) {
            return base.Channel.GetPositionByIDAsync(id);
        }
        
        public string PostPosition(ApplicationService.DTOs.PositionDTO positionDto) {
            return base.Channel.PostPosition(positionDto);
        }
        
        public System.Threading.Tasks.Task<string> PostPositionAsync(ApplicationService.DTOs.PositionDTO positionDto) {
            return base.Channel.PostPositionAsync(positionDto);
        }
        
        public string PutPosition(ApplicationService.DTOs.PositionDTO positionDTO) {
            return base.Channel.PutPosition(positionDTO);
        }
        
        public System.Threading.Tasks.Task<string> PutPositionAsync(ApplicationService.DTOs.PositionDTO positionDTO) {
            return base.Channel.PutPositionAsync(positionDTO);
        }
        
        public string DeletePosition(int id) {
            return base.Channel.DeletePosition(id);
        }
        
        public System.Threading.Tasks.Task<string> DeletePositionAsync(int id) {
            return base.Channel.DeletePositionAsync(id);
        }
        
        public ApplicationService.DTOs.ContractDTO[] GetContracts(string searchContr) {
            return base.Channel.GetContracts(searchContr);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.ContractDTO[]> GetContractsAsync(string searchContr) {
            return base.Channel.GetContractsAsync(searchContr);
        }
        
        public ApplicationService.DTOs.ContractDTO GetContractByID(int id) {
            return base.Channel.GetContractByID(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.ContractDTO> GetContractByIDAsync(int id) {
            return base.Channel.GetContractByIDAsync(id);
        }
        
        public string PostContract(ApplicationService.DTOs.ContractDTO contractDto) {
            return base.Channel.PostContract(contractDto);
        }
        
        public System.Threading.Tasks.Task<string> PostContractAsync(ApplicationService.DTOs.ContractDTO contractDto) {
            return base.Channel.PostContractAsync(contractDto);
        }
        
        public string PutContract(ApplicationService.DTOs.ContractDTO contractDTO) {
            return base.Channel.PutContract(contractDTO);
        }
        
        public System.Threading.Tasks.Task<string> PutContractAsync(ApplicationService.DTOs.ContractDTO contractDTO) {
            return base.Channel.PutContractAsync(contractDTO);
        }
        
        public string DeleteContract(int id) {
            return base.Channel.DeleteContract(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteContractAsync(int id) {
            return base.Channel.DeleteContractAsync(id);
        }
    }
}
